utils 
	void	_bzero(void *s, int n)		sからnバイト0で初期化
		例） _bzero(test, sizeof(t_test))   ->   t_test型のtestを0で初期化

	void	_bcopy(void *destvoid     _bcopy(void *dest, void *src, int size)

read_command.c

	char	*read_all(int fd)	fdから読みとってmallocしたやつに格納。失敗したらNULLを返す。要free

	char	**split_command(char *s, char c)	文字列sをcでスプリット（クオーテーション対応）。失敗したらNULLを返す。要free

	void	free_split_command_all(char **s)	split_commandでのmallocをすべてfree

echo.c
	echo -> echoコマンド(with -nオプション)　（コマンドライン引数を　echo　の引数と仮定）

cd.c
	cd -> cdコマンド(相対パスと絶対パス)　（コマンドライン引数を　cd　の引数と仮定）

pwd.c
	pwd -> pwdコマンド　ただpwdするだけ

export.c (未完)
	export->　コマンドライン引数を　export　の引数と仮定して書いていて、コードとして書いたのは引数なしの時だけ（表示内容に自信なし）

argument.c

	#define ARG_TYPE_STR 0
	#define ARG_TYPE_int 0

	typedef struct s_arg
	{
		char *name;
		int type;
		void *data;
	}               t_arg;		//変数そのもの

	typedef struct s_arg_list
	{
		t_arg   args[ARG_SIZE];
		int     arg_num;			//argsの中にある有効な変数のインデックスの最大値
		s_arg_list  *next;
	}               t_arg_list;		//変数を線形リストで管理

	int     arg_free(t_arg *arg)	変数のfree 戻り値は0
	int     arg_add(t_arg *arg, t_arg_list *arg_list)	変数の追加　成功:0　失敗:-1
	int     arg_delete(t_arg *arg, t_arg_list *arg_list)　変数の消去 成功:0　失敗:-1

char *separate_redirect(char *command);    | で区切ったレベルのコマンド群（文字列）からレダイレクトの前後をスペースを一つ以上追加してくれる関数

void pipeline(char ***cmd, char ***raw_cmd);
 cmdはstr_Bの文字列配列(整形後)の配列、 raw_cmdはstr_A（つまりはリダイレクトやfilenameを残したままの文字列配列）の配列
　リダイレクトおよびパイプの影響をしっかり受けて実行する関数

//　todo ・パイプで区切られて渡された文字列の文法チェックの関数　・str_Aからstr_Bを作る関数